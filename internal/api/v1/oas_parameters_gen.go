// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// StartSearchParams is parameters of startSearch operation.
type StartSearchParams struct {
	XClient string
}

func unpackStartSearchParams(packed middleware.Parameters) (params StartSearchParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Client",
			In:   "header",
		}
		params.XClient = packed[key].(string)
	}
	return params
}

func decodeStartSearchParams(args [0]string, argsEscaped bool, r *http.Request) (params StartSearchParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Client.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Client",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XClient = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Client",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
